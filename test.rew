begin theory nat

    <nat> ::= z | s <nat>;
    <add> ::= add ( <nat> ) ( <nat> );
    <expr> ::= <nat> | <add> | s expr;

  rules

    add z z ==> z;

    add z ?n ==> ?n;
    add s <nospace> ?n ?m ==> s add ?n ?m;

end theory



theorem test1 : (1 + 1) = 2
proof
  lhs: cbv
qed

theorem test2 : (1 * 4) = 4
proof
  lhs: cbv
qed

theorem test3 : (4 + 4) = 8
proof
  lhs: cbv
qed

theorem test4 : (2 * 4) = 8
proof
  lhs: cbv_step
  lhs: one_td rewrite test2
  lhs: rewrite test3
qed

theorem test5 : 3 = (2 + 1)
proof
  rhs: cbv_step
  rhs: cbv_step
  rhs: cbv_step
qed

