begin theory nat

    <nat> ::= z | s <nat>;
    <add> ::= ( <expr> + <expr> );
    <mul> ::= ( <expr> * <expr> );
    <expr> ::= <nat> | <add> | <mul> | s <expr>;

  numeral notation <nat> z s

  rules

    add_z <expr>, ( z + <expr> ):
      ( z + ?n ) ==> ?n;

    add_s <expr>, ( s <expr> + <expr> ):
      ( s ?n + ?m ) ==> s ( ?n + ?m );

    mul_z <expr>, ( z * <expr> ):
      ( z * ?n ) ==> z;

    mul_s <expr>, ( s <expr> * <expr> ):
      ( s ?n * ?m ) ==> ( ?m + ( ?n * ?m ) );

end theory

theorem test1 : ( s z + s z ) = s s z
proof
  lhs: rewrite add_s
  lhs: rewrite add_z
qed

theorem test2 : ( 3 + 1 ) = 4
proof
  lhs: rewrite add_s
  lhs: rewrite add_s
  lhs: rewrite add_s
  lhs: rewrite add_z
qed

theorem test3 : ( 3 * 2 ) = 6
proof
  lhs: rewrite mul_s
  lhs: rewrite mul_s
  lhs: rewrite mul_s
  lhs: rewrite mul_z

  lhs: rewrite add_s
  lhs: rewrite add_s
  lhs: rewrite add_z
qed

