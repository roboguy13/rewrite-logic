begin theory nat

    <nat> ::= z | s <nat>;
    <add> ::= ( <expr> + <expr> );
    <mul> ::= ( <expr> * <expr> );
    <expr> ::= <nat> | <add> | <mul> | s <expr>;

  numeral notation <nat> z s

  rules

    add_z: ( z + ?n ) ==> ?n;
    add_s: ( s ?n + ?m ) ==> s ( ?n + ?m );

    mul_z: ( z * ?n ) ==> z;
    mul_s: ( s ?n * ?m ) ==> ( ?m + ( ?n * ?m ) );

end theory

theorem test1 : (1 + 1) = 2
proof
  lhs: cbv
qed

theorem test2 : (1 * 4) = 4
proof
  lhs: cbv
qed

theorem test3 : (4 + 4) = 8
proof
  lhs: cbv
qed

theorem test4 : (2 * 4) = 8
proof
  lhs: cbv_step
  lhs: one_td rewrite test2
  lhs: rewrite test3
qed

theorem test5 : 3 = (2 + 1)
proof
  rhs: cbv_step
  rhs: cbv_step
  rhs: cbv_step
qed

